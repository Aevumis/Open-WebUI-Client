name: Build Android APK

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      profile:
        description: 'Build profile'
        required: true
        default: 'preview'
        type: choice
        options:
        - development
        - preview
        - production
        - production-apk

jobs:
  build:
    name: Build Android APK
    runs-on: ubuntu-latest
    
    steps:
    - name: üèó Setup repo
      uses: actions/checkout@v4

    - name: üèó Setup Node
      uses: actions/setup-node@v4
      with:
        node-version: 18.x
        cache: npm

    - name: üèó Setup EAS
      uses: expo/expo-github-action@v8
      with:
        eas-version: latest
        token: ${{ secrets.EXPO_TOKEN }}

    - name: üîß Install jq
      run: |
        sudo apt-get update
        sudo apt-get install -y jq

    - name: üì¶ Install dependencies
      run: npm ci

    - name: üöÄ Build app
      run: |
        # Determine build profile
        if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
          PROFILE="${{ github.event.inputs.profile }}"
        elif [ "${{ github.ref }}" = "refs/heads/main" ]; then
          PROFILE="production-apk"
        else
          PROFILE="preview"
        fi
        
        echo "Building with profile: $PROFILE"
        echo "PROFILE=$PROFILE" >> $GITHUB_ENV
        # Start build and wait for completion; capture JSON result
        eas build --platform android --profile "$PROFILE" --non-interactive --wait --json > build.json
        echo "EAS build finished. Captured output to build.json"
        # Parse build id from either array or object shape
        BUILD_ID=$(jq -r '.[0].id // .id // empty' build.json)
        echo "Build ID: ${BUILD_ID}"
        echo "build_id=${BUILD_ID}" >> $GITHUB_OUTPUT
      id: build

    - name: üì± Download APK
      if: success()
      run: |
        # Resolve artifact URL and download APK
        ID=""
        if [ -f build.json ]; then
          ID=$(jq -r '.[0].id // .id // empty' build.json)
        fi
        if [ -z "$ID" ]; then
          echo "No build ID found in build.json; cannot download."
          exit 1
        fi
        
        echo "Fetching build details for $ID"
        # Check available flags first
        echo "Checking eas build:view help:"
        eas build:view --help || true
        
        # Add retry logic for build:view command
        for i in {1..3}; do
          echo "Attempt $i to fetch build details..."
          # Try different command variations
          if eas build:view "$ID" --json > build_view.json 2>&1; then
            echo "Successfully fetched build details"
            break
          elif eas build:view "$ID" > build_view_text.txt 2>&1; then
            echo "Successfully fetched build details in text format"
            # Parse the artifact URL from text output
            ARTIFACT_LINE=$(grep "^Artifact" build_view_text.txt || echo "")
            if [ -n "$ARTIFACT_LINE" ]; then
              URL=$(echo "$ARTIFACT_LINE" | awk '{print $2}')
              echo "Extracted artifact URL from text: $URL"
              # Create a simple JSON structure for consistency
              echo "{\"artifacts\":{\"buildUrl\":\"$URL\"}}" > build_view.json
            fi
            break
          else
            echo "Failed to fetch build details (attempt $i)"
            if [ $i -eq 3 ]; then
              echo "All attempts failed. Build view output:"
              cat build_view.json || echo "No build_view.json file created"
              echo "Trying to get build info via API..."
              # Try direct API call as fallback
              curl -H "Authorization: Bearer $EXPO_TOKEN" \
                   -H "Accept: application/json" \
                   "https://api.expo.dev/v2/builds/$ID" > build_view.json 2>&1 || true
              if [ -s build_view.json ]; then
                echo "Got build info via API"
                break
              fi
              exit 1
            fi
            sleep 10
          fi
        done
        
        # Check if build_view.json has valid content
        if [ ! -s build_view.json ]; then
          echo "build_view.json is empty or doesn't exist"
          exit 1
        fi
        
        echo "Build view content:"
        cat build_view.json
        
        # Try different JSON paths for the artifact URL
        URL=$(jq -r '.artifacts.buildUrl // .artifacts.applicationArchiveUrl // .artifacts.appBuildUrl // .data.artifacts.buildUrl // .data.artifacts.applicationArchiveUrl // .data.artifacts.appBuildUrl // empty' build_view.json 2>/dev/null)
        
        # If JSON parsing failed, try to extract URL from text output
        if [ -z "$URL" ] || [ "$URL" = "null" ]; then
          echo "JSON parsing failed, trying to extract URL from text output..."
          if [ -f "build_view_text.txt" ]; then
            URL=$(grep "^Artifact" build_view_text.txt | awk '{print $2}' || echo "")
            echo "Extracted URL from text: $URL"
          fi
        fi
        
        if [ -z "$URL" ] || [ "$URL" = "null" ]; then
          echo "Could not resolve artifact URL"
          echo "JSON content:"
          cat build_view.json || echo "No JSON file"
          echo "Text content:"
          cat build_view_text.txt || echo "No text file"
          exit 1
        fi
        
        echo "Resolved artifact URL: $URL"
        
        # Determine file extension based on build type
        if [[ "$URL" == *".aab"* ]] || [[ "${{ env.PROFILE }}" == "production" ]]; then
          FILENAME="./app-build.aab"
        else
          FILENAME="./app-build.apk"
        fi
        
        echo "Downloading to: $FILENAME"
        curl -L "$URL" -o "$FILENAME"
        
        # Verify download
        if [ -f "$FILENAME" ]; then
          echo "Download successful. File size: $(du -h "$FILENAME" | cut -f1)"
          echo "ARTIFACT_FILE=$FILENAME" >> $GITHUB_ENV
        else
          echo "Download failed - file not found"
          exit 1
        fi

    - name: üìä Build Summary
      if: success()
      run: |
        echo "## üöÄ Build Completed Successfully" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Profile:** ${PROFILE:-auto-detected}" >> $GITHUB_STEP_SUMMARY
        echo "**Platform:** Android" >> $GITHUB_STEP_SUMMARY
        echo "**Build ID:** ${{ steps.build.outputs.build_id }}" >> $GITHUB_STEP_SUMMARY
        echo "**Commit:** ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        # Get artifact size
        if [ -f "$ARTIFACT_FILE" ]; then
          ARTIFACT_SIZE=$(du -h "$ARTIFACT_FILE" | cut -f1)
          ARTIFACT_TYPE=$(basename "$ARTIFACT_FILE" | cut -d'.' -f2 | tr '[:lower:]' '[:upper:]')
          echo "**${ARTIFACT_TYPE} Size:** $ARTIFACT_SIZE" >> $GITHUB_STEP_SUMMARY
        fi

    - name: üì¶ Upload Android Artifact
      if: success()
      uses: actions/upload-artifact@v4
      with:
        name: android-${{ env.PROFILE }}-${{ github.run_number }}
        path: ${{ env.ARTIFACT_FILE }}
        retention-days: 30

    - name: üí¨ Comment PR
      if: github.event_name == 'pull_request' && success()
      uses: actions/github-script@v7
      env:
        BUILD_ID: ${{ steps.build.outputs.build_id }}
        PROFILE: ${{ env.PROFILE }}
      with:
        script: |
          const fs = require('fs');
          const artifactFile = process.env.ARTIFACT_FILE || './app-build.apk';
          const artifactExists = fs.existsSync(artifactFile);
          const artifactSize = artifactExists 
            ? require('child_process').execSync(`du -h "${artifactFile}"`).toString().split('\t')[0]
            : 'Unknown';
          const artifactType = artifactFile.includes('.aab') ? 'AAB' : 'APK';
          const lines = [
            '## üì± Android Build Ready',
            '',
            '**Build completed successfully!**',
            `- **Profile:** ${process.env.PROFILE || 'auto-detected'}`,
            `- **${artifactType} Size:** ${artifactSize}`,
            '- **Download:** Check the "Artifacts" section in this workflow run',
            `- **Build ID:** ${process.env.BUILD_ID}`,
            '',
            `You can download and test the ${artifactType} from the workflow artifacts.`
          ];
          const bodyText = lines.join('\n');

          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: bodyText
          });

  notify-failure:
    name: Notify Build Failure
    runs-on: ubuntu-latest
    needs: build
    if: failure()
    
    steps:
    - name: üí¨ Comment PR on Failure
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      env:
        COMMIT_SHA: ${{ github.sha }}
        RUN_URL: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
      with:
        script: |
          const lines = [
            '## ‚ùå Android Build Failed',
            '',
            'The Android build failed for this PR. Please check the workflow logs for details.',
            '',
            '**Build Details:**',
            `- **Commit:** ${process.env.COMMIT_SHA}`,
            `- **Workflow:** [View logs](${process.env.RUN_URL})`,
            '',
            'Please fix the issues and push again to trigger a new build.'
          ];
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: lines.join('\n')
          });